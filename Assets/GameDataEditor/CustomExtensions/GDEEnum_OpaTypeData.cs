// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//
//      This file was generated from this data file:
//      Assets/GameDataEditor/Resources/gde_data.txt
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDEEnum_OpaTypeData : IGDEData
    {
        static string IDKey = "ID";
		int _ID;
        public int ID
        {
            get { return _ID; }
            set {
                if (_ID != value)
                {
                    _ID = value;
					GDEDataManager.SetInt(_key, IDKey, _ID);
                }
            }
        }

        public GDEEnum_OpaTypeData(string key) : base(key)
        {
            GDEDataManager.RegisterItem(this.SchemaName(), key);
        }
        public override Dictionary<string, object> SaveToDict()
		{
			var dict = new Dictionary<string, object>();
			dict.Add(GDMConstants.SchemaKey, "Enum_OpaType");
			
            dict.Merge(true, ID.ToGDEDict(IDKey));
            return dict;
		}

        public override void UpdateCustomItems(bool rebuildKeyList)
        {
        }

        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetInt(IDKey, out _ID);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _ID = GDEDataManager.GetInt(_key, IDKey, _ID);
        }

        public GDEEnum_OpaTypeData ShallowClone()
		{
			string newKey = Guid.NewGuid().ToString();
			GDEEnum_OpaTypeData newClone = new GDEEnum_OpaTypeData(newKey);

            newClone.ID = ID;

            return newClone;
		}

        public GDEEnum_OpaTypeData DeepClone()
		{
			GDEEnum_OpaTypeData newClone = ShallowClone();
            return newClone;
		}

        public void Reset_ID()
        {
            GDEDataManager.ResetToDefault(_key, IDKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(IDKey, out _ID);
        }

        public void ResetAll()
        {
            GDEDataManager.ResetToDefault(_key, IDKey);


            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
